cscope 16 $HOME\ns-allinone-2.31\ns-2.31\wimax\common"               0000020686
	@wimax_buffers.cc

20 
	~<wimax_buf„rs.h
>

28 
	gWimaxRós£mblyBuf„r
::
	$WimaxRós£mblyBuf„r
 ()

33 
pdu_
.
	`ªsize
 (
WimaxFsh
::
	`f¢Size
());

34  
i
 = 0 ; i < 
WimaxFsh
::
	`f¢Size
(Ë; i++ ) 
pdu_
[i] = 0;

35 
	}
}

37 
WimaxSdu
*

38 
	gWimaxRós£mblyBuf„r
::
	$addPdu
 (
WimaxPdu
* 
√wpdu
)

42 c⁄° 
f¢
 = 
√wpdu
->
	`fsh
().
	`f¢
();

45 i‡–
√wpdu
->
	`hdr
().
	`‰agmíèti⁄
(Ë=
Ál£
 )

46  
√wpdu
->
	`sdu
();

51 i‡–
f¢
 >
WimaxFsh
::
	`f¢Size
(ËË
	`ab‹t
 ();

54 i‡–
√wpdu
->
	`fsh
().
	`°©e
(Ë=
WimaxFsh
::
FIRST_FRAG
 ) {

56 i‡–
pdu_
[
f¢
] ) {

57 
pdu_
[
f¢
]->
	`sdu
()->
	`dr›Paylﬂd
();

58 
dñëe
 
pdu_
[
f¢
]->
	`sdu
();

59 
dñëe
 
pdu_
[
f¢
];

61 
pdu_
[
f¢
] = 
√w
 
	`WimaxPdu
 (*
√wpdu
);

64 } i‡–
√wpdu
->
	`fsh
().
	`°©e
(Ë=
WimaxFsh
::
LAST_FRAG
 ) {

70 i‡–
pdu_
[
f¢
] ) {

71 
pdu_
[
f¢
]->
	`sdu
()->
	`‰ìPaylﬂd
();

72 
dñëe
 
pdu_
[
f¢
]->
	`sdu
();

73 
dñëe
 
pdu_
[
f¢
];

75 
pdu_
[
f¢
] = 0;

76  
√wpdu
->
	`sdu
();

79 i‡–
pdu_
[
f¢
] ) {

80 
pdu_
[
f¢
]->
	`sdu
()->
	`‰ìPaylﬂd
();

81 
dñëe
 
pdu_
[
f¢
]->
	`sdu
();

82 
dñëe
 
pdu_
[
f¢
];

84 
pdu_
[
f¢
] = 
√w
 
	`WimaxPdu
 (*
√wpdu
);

91 
	}
}

	@wimax_buffers.h

20 #i‚de‡
__NS2_WIMAX_BUFFERS_H


21 
	#__NS2_WIMAX_BUFFERS_H


	)

23 
	~<wimax_comm⁄.h
>

24 
	~<wimax_∑ckë.h
>

26 
	~<ve˘‹
>

40 ˛as†
	cWimaxRós£mblyBuf„r
 {

42 
	m°d
::
ve˘‹
<
WimaxPdu
*> 
pdu_
;

43 
	mpublic
:

45 
WimaxRós£mblyBuf„r
 ();

47 ~
	$WimaxRós£mblyBuf„r
 () { }

50 
WimaxSdu
* 
	`addPdu
 (
WimaxPdu
* 
pdu
);

51 
	}
};

	@wimax_circular.h

20 #i‚de‡
__NS2_WIMAX_CIRCULAR_H


21 
	#__NS2_WIMAX_CIRCULAR_H


	)

23 
	~<li°
>

24 
	~<as£π.h
>

27 
	gãm∂©e
<
ty≥«me
 
	gT
>

28 ˛as†
	cCúcuœrLi°
 {

30 
‰õnd
 
˛ass
 
	mWimaxDebug
;

33 
	m°d
::
li°
<
T
> 
li°_
;

36 
ty≥«me
 
	m°d
::
li°
<
T
 >::
ôî©‹
 
cur_
;

39 
	msize_
;

41 
	mpublic
:

43 
	$CúcuœrLi°
 (Ë{ 
size_
 = 0; }

45 ~
	$CúcuœrLi°
 (Ë{ 
	}
}

48 
boﬁ
 
	$em±y
 (Ë{  ( 
size_
 =0 ); 
	}
}

51 
	$size
 (Ë{  
size_
; 
	}
}

54 
boﬁ
 
	$föd
 (c⁄° 
T
& 
t
) {

55 i‡–
size_
 =0 )  
Ál£
;

56 
ty≥«me
 
°d
::
li°
<
T
>::
ôî©‹
 
ô
;

57  
ô
 = 
li°_
.
	`begö
(Ë; ià!li°_.
	`íd
(Ë&& *ô !
t
 ; ++it ) { }

58 i‡–
ô
 =
li°_
.
	`íd
(ËË 
Ál£
;

59  
åue
;

60 
	}
}

66 
	gT
& 
	$föd
 (
T
& 
t
, 
boﬁ
& 
vÆid
) {

67 i‡–
size_
 =0 ) { 
vÆid
 = 
Ál£
;  
t
; }

68 
ty≥«me
 
°d
::
li°
<
T
>::
ôî©‹
 
ô
;

69  
ô
 = 
li°_
.
	`begö
(Ë; ià!li°_.
	`íd
(Ë&& *ô !
t
 ; ++it ) { }

70 i‡–
ô
 =
li°_
.
	`íd
(ËË{ 
vÆid
 = 
Ál£
;  
t
; }

71 
vÆid
 = 
åue
;

72  *
ô
;

73 
	}
}

76 
	$ö£π
 (c⁄° 
T
& 
t
) {

77 i‡–
size_
 =0 ) { 
li°_
.
	`push_back
 (
t
); 
cur_
 =Üi°_.
	`begö
(); }

78 
li°_
.
	`ö£π
 (
cur_
, 
t
);

79 ++
size_
;

80 
	}
}

83 
	$îa£
 () {

84 i‡–
size_
 == 0 ) ;

85 
ty≥«me
 
°d
::
li°
<
T
>::
ôî©‹
 
dr›
 = 
cur_
++;

86 i‡–
cur_
 =
li°_
.
	`íd
(ËËcur_ =Üi°_.
	`begö
();

87 
li°_
.
	`îa£
 (
dr›
);

88 --
size_
;

89 
	}
}

92 
	$move
 () {

93 i‡–
size_
 > 0 && ++
cur_
 =
li°_
.
	`íd
(ËËcur_ =Üi°_.
	`begö
(); 
	}
}

101 c⁄° 
	gT
& 
	$cuºít
 (Ëc⁄° { 
	`as£π
 ( 
size_
 > 0 );  *
cur_
; 
	}
}

104 
	gT
& 
	$cuºít
 (Ë{ 
	`as£π
 ( 
size_
 > 0 );  *
cur_
; 
	}
}

	@wimax_common.h

20 #i‚de‡
__NS2_WIMAX_COMMON_H


21 
	#__NS2_WIMAX_COMMON_H


	)

23 
	~<as£π.h
>

24 
	~<li°
>

25 
	~<m≠
>

27 
	~<wimax_debug.h
>

28 
	~<wimax_cúcuœr.h
>

29 
	~<wimax_m©rix.h
>

30 
	~<wimax_utûôõs.h
>

	@wimax_debug.cc

20 
	~<wimax_debug.h
>

21 
	~<wimsh_∑ckë.h
>

23 
	~<∑ckë.h
>

24 
	~<ù.h
>

26 ˛as†
	cWimaxDebugCœss
 : 
public
 
T˛Cœss
 {

27 
public
:

28 
	$WimaxDebugCœss
(Ë: 
	`T˛Cœss
("WimaxDebug") {}

29 
T˛Obje˘
* 
	$¸óã
(, const *const*) {

30  (
√w
 
WimaxDebug
);

31 
	}
}

32 } 
	g˛ass_wimax_debug
;

34 
	gWimaxDebug
::
buf_
[
NBUFS
][
BUFSIZE
];

35 
	gWimaxDebug
::
cur_
 = 0;

36 
boﬁ
 
	gWimaxDebug
::
íabÀd_
 = 
åue
;

37 
	g°d
::
m≠
<
°d
::
°rög
, 
	gboﬁ
> 
	gWimaxDebug
::
åa˚_
;

40 
	gWimaxDebug
::
	$comm™d
 (
¨gc
, c⁄° *c⁄°* 
¨gv
)

42 i‡–
¨gc
 =2 && 
	`°rcmp
 (
¨gv
[1], "enable") == 0 ) {

43 
íabÀd_
 = 
åue
;

44  
TCL_OK
;

45 } i‡–
¨gc
 =2 && 
	`°rcmp
 (
¨gv
[1], "disable") == 0 ) {

46 
íabÀd_
 = 
Ál£
;

47  
TCL_OK
;

48 } i‡–
¨gc
 =4 && 
	`°rcmp
 (
¨gv
[1], "trace") == 0 ) {

49 
boﬁ
 
°©us
;

51 i‡–
	`°rcmp
 (
¨gv
[3], "⁄"Ë=0 ) 
°©us
 = 
åue
;

52 i‡–
	`°rcmp
 (
¨gv
[3], "off"Ë=0 ) 
°©us
 = 
Ál£
;

54 
	`Ârötf
 (
°dîr
, "theÅrace status of function '%s' must be "

55 "eôhî '⁄' o∏'off',ÇŸ '%s'\n", 
¨gv
[2],árgv[3]);

56  
TCL_ERROR
;

59 
	`åa˚
 (
¨gv
[2], 
°©us
);

60  
TCL_OK
;

63  
TCL_ERROR
;

64 
	}
}

67 
	gWimaxDebug
::
	$f‹m©
 (
Packë
* 
pkt
)

69 * 
b
 = 
buf_
[
cur_
];

70 
cur_
 = ( cur_ + 1 =
NBUFS
 ) ? 0 : ( cur_ + 1 );

72 
	`¢¥ötf
 (
b
, 
BUFSIZE
, "IP fid %d size %d src %d dst %d uid %d",

73 
	`HDR_IP
(
pkt
)->
	`Êowid
(), 
	`HDR_CMN
’kt)->
	`size
(),

74 
	`HDR_IP
(
pkt
)->
	`ßddr
(), HDR_IP’kt)->
	`daddr
(), 
	`HDR_CMN
’kt)->
	`uid
());

75  
b
;

76 
	}
}

79 
	gWimaxDebug
::
	$f‹m©
 (
WimaxSdu
* 
sdu
)

81 * 
b
 = 
buf_
[
cur_
];

82 
cur_
 = ( cur_ + 1 =
NBUFS
 ) ? 0 : ( cur_ + 1 );

84 
WimaxNodeId
* 
h›s
;

85 
nh›s
;

86 
sdu
->
	`åavî£dH›s
 (
h›s
, 
nh›s
);

88 
n
;

90 i‡–
sdu
->
	`ù
() ) {

91 
n
 = 
	`¢¥ötf
 (
b
, 
BUFSIZE
, "%†SDU", 
	`f‹m©
 (
sdu
->
	`ù
()));

92  
i
 = 0 ; i < 
nh›s
 ; i++ ) {

93 
n
 +
	`¢¥ötf
 (
b
 +Ç, 
BUFSIZE
 -Ç, " h› %d", 
h›s
[
i
]);

96 
	`¢¥ötf
 (
b
, 
BUFSIZE
, "unknown SDUÖayload");

99  
b
;

100 
	}
}

103 
	gWimaxDebug
::
	$f‹m©
 (
WimaxPdu
* 
pdu
)

105 * 
b
 = 
buf_
[
cur_
];

106 
cur_
 = ( cur_ + 1 =
NBUFS
 ) ? 0 : ( cur_ + 1 );

108 
n
;

110 i‡(
pdu
->
	`ty≥
(Ë=
WimaxPdu
::
GENERIC
){

111 
n
 = 
	`¢¥ötf
 (
b
, 
BUFSIZE
,

113 
	`f‹m©
(
pdu
->
	`sdu
()),

114 
pdu
->
	`nodeId
(),Ödu->
	`hdr
().
	`meshCid
().
	`d°
(),Ödu->
	`îr‹
(),

115 
pdu
->
	`size
(),Ödu->
	`hdr
().
	`¸c
(),Ödu->hdr().
	`meshCid
().
	`¥i‹ôy
(),

116 
pdu
->
	`hdr
().
	`meshCid
().
	`dr›
());

118 i‡–
pdu
->
	`hdr
().
	`‰agmíèti⁄
() )

119 
	`¢¥ötf
 (
b
 + 
n
, 
BUFSIZE
 -Ç,

121 –
pdu
->
	`fsh
().
	`°©e
(Ë=
WimaxFsh
::
NO_FRAG
 ) ? "none " :

122 –
pdu
->
	`fsh
().
	`°©e
(Ë=
WimaxFsh
::
LAST_FRAG
 ) ? "last " :

123 –
pdu
->
	`fsh
().
	`°©e
(Ë=
WimaxFsh
::
FIRST_FRAG
 ) ? "first" :

124 –
pdu
->
	`fsh
().
	`°©e
(Ë=
WimaxFsh
::
CONT_FRAG
 ) ? "cont " : "unkn ",

125 
pdu
->
	`fsh
().
	`f¢
());

127 
n
 = 
	`¢¥ötf
 (
b
, 
BUFSIZE
, "UNKNOWN PDUÅy≥ '%d'", 
pdu
->
	`ty≥
());

129  
b
;

130 
	}
}

133 
	gWimaxDebug
::
f‹m©
 (
wimax
::
Bur°Profûe
 
bp
)

135 * 
b
 = 
buf_
[
cur_
];

136 
	gcur_
 = ( 
cur_
 + 1 =
NBUFS
 ) ? 0 : ( cur_ + 1 );

138 
¢¥ötf
 (
b
, 
BUFSIZE
, "%s",

139 –
bp
 =
wimax
::
QPSK_1_2
 ) ? "QPSK-1/2" :

140 –
bp
 =
wimax
::
QPSK_3_4
 ) ? "QPSK-3/4" :

141 –
bp
 =
wimax
::
QAM16_1_2
 ) ? "16QAM-1/2" :

142 –
bp
 =
wimax
::
QAM16_3_4
 ) ? "16QAM-3/4" :

143 –
bp
 =
wimax
::
QAM64_2_3
 ) ? "64QAM-2/3" :

144 –
bp
 =
wimax
::
QAM64_3_4
 ) ? "64QAM-3/4" :

147  
	gb
;

151 
	gWimaxDebug
::
f‹m©
 (
wimax
::
Bur°Ty≥
 
ty≥
)

153 * 
b
 = 
buf_
[
cur_
];

154 
	gcur_
 = ( 
cur_
 + 1 =
NBUFS
 ) ? 0 : ( cur_ + 1 );

156 
¢¥ötf
 (
b
, 
BUFSIZE
, "%s",

157 –
ty≥
 =
wimax
::
DATA
 ) ? "DATA" :

158 –
ty≥
 =
wimax
::
MSHDSCH
 ) ? "MSH-DSCH" :

159 –
ty≥
 =
wimax
::
MSHNCFG
 ) ? "MSH-NCFG" :

160 –
ty≥
 =
wimax
::
MSHNENT
 ) ? "MSH-NENT" :

163  
	gb
;

168 
	gWimaxDebug
::
	$¥öt
 (
WimshBur°
* 
bur°
, 
FILE
* 
os
, c⁄° * 
hdr
)

171 
	`Ârötf
 (
os
, "%sBurstÅype %s size %uÉrror %uÅxtime %fÖrofile %s "

173 
hdr
, 
	`f‹m©
(
bur°
->
	`ty≥
()), bur°->
	`size
(),

174 
bur°
->
	`îr‹
(), bur°->
	`txtime
(), 
	`f‹m©
 (bur°->
	`¥ofûe
()),

175 
bur°
->
	`sour˚
());

178 i‡–
bur°
->
	`ty≥
(Ë=
wimax
::
MSHDSCH
 )

179 
	`¥öt
 ( 
bur°
->
	`mshDsch
(), 
os
, 
hdr
 );

180 i‡–
bur°
->
	`ty≥
(Ë=
wimax
::
MSHNCFG
 )

181 
	`¥öt
 ( 
bur°
->
	`mshNcfg
(), 
os
, 
hdr
 );

182 i‡–
bur°
->
	`ty≥
(Ë=
wimax
::
MSHNENT
 )

183 
	`¥öt
 ( 
bur°
->
	`mshNít
(), 
os
, 
hdr
 );

184 i‡–
bur°
->
	`ty≥
(Ë=
wimax
::
DATA
 ) {

185 
°d
::
li°
<
WimaxPdu
*>& 
pdus
 = 
bur°
->
	`pdus
();

186 
°d
::
li°
<
WimaxPdu
*>::
ôî©‹
 
ô
;

187  
ô
 = 
pdus
.
	`begö
(Ë; ià!pdus.
	`íd
() ; ++it ) {

188 
	`Ârötf
 (
os
, "%s%s\n", 
hdr
, 
	`f‹m©
 (*
ô
));

191 
	`Ârötf
 (
os
, "%sUNKNOWN bur°Åy≥\n", 
hdr
);

192 
	}
}

196 
	gWimaxDebug
::
	$¥öt
 (
WimshMshDsch
* 
dsch
, 
FILE
* 
os
, c⁄° * 
hdr
)

199 
	`Ârötf
 (
os
, "%sMSH-DSCH size %d (remaining %d)\n",

200 
hdr
, 
dsch
->
	`size
(), dsch->
	`ªmaöög
());

203 
°d
::
li°
<
WimshMshDsch
::
NghIE
>& 
ngh
 = 
dsch
->
	`ngh
();

204 
°d
::
li°
<
WimshMshDsch
::
NghIE
>::
ôî©‹
 
nghIt
;

205 
	`Ârötf
 (
os
, "%sCOORDINATION (%d)\n"

207 
hdr
, 
ngh
.
	`size
(), hdr, 
dsch
->
	`my£lf
().
nodeId_
,

208 
dsch
->
	`my£lf
().
√xtXmtMx_
, dsch->my£lf().
xmtHﬁdoffExp⁄ít_
);

209  
nghIt
 = 
ngh
.
	`begö
(Ë;ÇghIà!ngh.
	`íd
() ;ÇghIt++ )

210 
	`Ârötf
 (
os
, "%snode %3d mx %3dÉxp %3d\n",

211 
hdr
, 
nghIt
->
nodeId_
,ÇghIt->
√xtXmtMx_
,ÇghIt->
xmtHﬁdoffExp⁄ít_
);

214 
°d
::
li°
<
WimshMshDsch
::
AvlIE
>& 
avl
 = 
dsch
->
	`avl
();

215 
°d
::
li°
<
WimshMshDsch
::
AvlIE
>::
ôî©‹
 
avlIt
;

216 
	`Ârötf
 (
os
, "%sAVAILABILITIES (%d)\n", 
hdr
, 
avl
.
	`size
());

217  
avlIt
 = 
avl
.
	`begö
(Ë;ávlIà!avl.
	`íd
() ;ávlIt++ )

218 
	`Ârötf
 (
os
,"%sframe %3d start %3dÑange %3d dir %sÖers %1d chan %2d\n",

219 
hdr
, 
avlIt
->
‰ame_
,ávlIt->
°¨t_
,ávlIt->
ønge_
,

220 –
avlIt
->
dúe˘i⁄_
 == 0 ) ? "NO" :

221 –
avlIt
->
dúe˘i⁄_
 == 1 ) ? "TX" :

222 –
avlIt
->
dúe˘i⁄_
 == 2 ) ? "RX" :

223 –
avlIt
->
dúe˘i⁄_
 == 3 ) ? "OK" : "XX",

224 
avlIt
->
≥rsi°í˚_
,ávlIt->
ch™√l_
);

227 
°d
::
li°
<
WimshMshDsch
::
ReqIE
>& 
ªq
 = 
dsch
->
	`ªq
();

228 
°d
::
li°
<
WimshMshDsch
::
ReqIE
>::
ôî©‹
 
ªqIt
;

229 
	`Ârötf
 (
os
, "%sREQUESTS (%d)\n", 
hdr
, 
ªq
.
	`size
());

230  
ªqIt
 = 
ªq
.
	`begö
(Ë;ÑeqIà!ªq.
	`íd
() ;ÑeqIt++ )

231 
	`Ârötf
 (
os
, "%snode %3dÜevel %3dÖers %1d\n",

232 
hdr
, 
ªqIt
->
nodeId_
,ÑeqIt->
Àvñ_
,ÑeqIt->
≥rsi°í˚_
);

235 
°d
::
li°
<
WimshMshDsch
::
G¡IE
>& 
g¡
 = 
dsch
->
	`g¡
();

236 
°d
::
li°
<
WimshMshDsch
::
G¡IE
>::
ôî©‹
 
g¡It
;

237 
	`Ârötf
 (
os
, "%sGRANTS/CONFIRMATIONS (%d)\n", 
hdr
, 
g¡
.
	`size
());

238  
g¡It
 = 
g¡
.
	`begö
(Ë; g¡Ià!g¡.
	`íd
() ; gntIt++ )

239 
	`Ârötf
 (
os
, "%snode %3d frame %3d start %3dÑange %3d dir %s "

241 
hdr
, 
g¡It
->
nodeId_
, g¡It->
‰ame_
,

242 
g¡It
->
°¨t_
, g¡It->
ønge_
,

243 –
g¡It
->
‰omReque°î_
 =
åue
 ) ? "CNF" : "GNT",

244 
g¡It
->
≥rsi°í˚_
, g¡It->
ch™√l_
);

245 
	}
}

248 
	gWimaxDebug
::
	$¥öt
 (
WimshMshNcfg
* 
ncfg
, 
FILE
* 
os
, c⁄° * 
hdr
)

251 
	`Ârötf
 (
os
, "%sMSH-NCFG size %d (remaining %d)\n",

252 
hdr
, 
ncfg
->
	`size
(),Çcfg->
	`ªmaöög
());

253 
	}
}

256 
	gWimaxDebug
::
	$¥öt
 (
WimshMshNít
* 
√¡
, 
FILE
* 
os
, c⁄° * 
hdr
)

259 
	`Ârötf
 (
os
, "%sMSH-NENT size %d (remaining %d)\n",

260 
hdr
, 
√¡
->
	`size
(),Çít->
	`ªmaöög
());

261 
	}
}

264 
	gWimaxDebug
::
¥öt
 (
CúcuœrLi°
<
wimax
::
LökId
>& 
li°
,

265 
FILE
* 
os
, c⁄° * 
hdr
)

267 
Ârötf
 (
os
, "%ssizê%d queue", 
hdr
, 
li°
.
size_
);

268 i‡–
	gli°
.
	gsize_
 == 0 ) {

269 
Ârötf
 (
os
, "Émpty\n");

272 
	g°d
::
li°
<
wimax
::
LökId
>::
ôî©‹
 
ô
;

273  
	gô
 = 
li°
.
li°_
.
begö
(Ë; ià!li°.li°_.
íd
() ; ++it ) {

274 
Ârötf
 (
os
, " %d,%s", 
ô
->
ndx_
, (ô->
dú_
 =
wimax
::
IN
) ? "in" : "out");

276 
Ârötf
 (
os
, "\n");

281 
	gWimaxDebug
::
¥öt
 (
CúcuœrLi°
<>& 
li°
,

282 
FILE
* 
os
, c⁄° * 
hdr
)

284 
Ârötf
 (
os
, "%ssizê%d queue", 
hdr
, 
li°
.
size_
);

285 i‡–
	gli°
.
	gsize_
 == 0 ) {

286 
Ârötf
 (
os
, "Émpty\n");

289 
	g°d
::
li°
<>::
ôî©‹
 
ô
;

290  
	gô
 = 
li°
.
li°_
.
begö
(Ë; ià!li°.li°_.
íd
() ; ++it ) {

291 
Ârötf
 (
os
, " %d", *
ô
);

293 
Ârötf
 (
os
, "\n");

	@wimax_debug.h

20 #i‚de‡
__NS2_WIMAX_DEBUG_H


21 
	#__NS2_WIMAX_DEBUG_H


	)

23 
	~<wimax_∑ckë.h
>

24 
	~<wimax_cúcuœr.h
>

25 
	~<wimax_m©rix.h
>

26 
	~<wimax_defs.h
>

28 
	~<°dio.h
>

29 
	~<°rög
>

30 
	~<m≠
>

32 
˛ass
 
	gWimaxSdu
;

33 
˛ass
 
	gWimaxPdu
;

34 
˛ass
 
	gWimshMshDsch
;

35 
˛ass
 
	gWimshMshNcfg
;

36 
˛ass
 
	gWimshMshNít
;

37 
˛ass
 
	gWimshBur°
;

40 
	#WIMAX_DEBUG


	)

50 ˛as†
	cWimaxDebug
 : 
public
 
T˛Obje˘
 {

51 íum { 
NBUFS
 = 10 };

52 íum { 
	gBUFSIZE
 = 1024 };

54 
	gbuf_
[
NBUFS
][
BUFSIZE
];

56 
	gcur_
;

58 
boﬁ
 
	gíabÀd_
;

60 
	g°d
::
m≠
<
°d
::
°rög
, 
	gboﬁ
> 
	gåa˚_
;

62 
	gpublic
:

64 
	$WimaxDebug
 (Ë{ 
	}
}

66 
vútuÆ
 ~
	$WimaxDebug
 (Ë{ 
	}
}

68 * 
f‹m©
 (
WimaxSdu
* 
sdu
);

70 * 
f‹m©
 (
WimaxPdu
* 
pdu
);

72 * 
f‹m©
 (
Packë
* 
pkt
);

74 * 
f‹m©
 (
wimax
::
Bur°Profûe
 
bp
);

76 * 
f‹m©
 (
wimax
::
Bur°Ty≥
);

79 
¥öt
 (
WimshBur°
* 
bur°
, 
FILE
* 
os
, c⁄° * 
hdr
 = "\t");

82 
¥öt
 (
CúcuœrLi°
<>& 
li°
,

83 
FILE
* 
os
, c⁄° * 
hdr
 = "\t");

87 
¥öt
 (
WimshMshDsch
* 
dsch
, 
FILE
* 
os
, c⁄° * 
hdr
 = "\t");

89 
¥öt
 (
WimshMshNcfg
* 
ncfg
, 
FILE
* 
os
, c⁄° * 
hdr
 = "\t");

91 
¥öt
 (
WimshMshNít
* 
√¡
, 
FILE
* 
os
, c⁄° * 
hdr
 = "\t");

93 
¥öt
 (
CúcuœrLi°
<
wimax
::
LökId
>& 
li°
,

94 
FILE
* 
os
, c⁄° * 
hdr
 = "\t");

98 
	gboﬁ
& 
	$íabÀd
 (Ë{  
íabÀd_
; 
	}
}

100 #ifde‡
WIMAX_DEBUG


103 
boﬁ
 
	$åa˚
 (c⁄° * 
f
) {

104  ( 
íabÀd_
 &&

105 
åa˚_
.
	`cou¡
(
°d
::
	`°rög
(
f
)) == 1 &&

106 
åa˚_
[
°d
::
	`°rög
(
f
)] =
åue
 ) ?Åruê: 
Ál£
; 
	}
}

109 
	$åa˚
 (c⁄° * 
f
, 
boﬁ
 
°©us
) {

110 
åa˚_
[
°d
::
	`°rög
(
f
)] = 
°©us
; 
	}
}

113 
boﬁ
 
	$åa˚
 (c⁄° * 
f
Ë{  
Ál£
; 
	}
}

114 
	$åa˚
 (c⁄° * 
f
, 
boﬁ
 
°©us
Ë{ 
	}
}

118 
	g¥Ÿe˘ed
:

120 
vútuÆ
 
comm™d
 (
¨gc
, c⁄° *c⁄°* 
¨gv
);

	@wimax_defs.h

20 #i‚de‡
__NS2_WIMAX_DEFS_H


21 
	#__NS2_WIMAX_DEFS_H


	)

23 
	~<obje˘.h
>

24 
	~<°dio.h
>

27 
	tWimaxNodeId
;

29 
«me•a˚
 
	gwimax
 {

32 íum { 
	gBROADCAST
 = 0xFFFFFFFF };

35 
	eCh™√lSètus
 { 
	gTX
, 
	gRX
, 
	gNONE
 };

38 
	eBur°Ty≥
 { 
	gDATA
, 
	gMSHNCFG
, 
	gMSHNENT
, 
	gMSHDSCH
, 
	gMSHCSCH
, 
	gMSHCSCF
 };

42 
	eLökDúe˘i⁄
 { 
	gIN
, 
	gOUT
 };

47 
	eDr›Pª˚dí˚
 { 
	gDROP_UNSPECIFIED
, 
	gDROP_HIGH
, 
	gDROP_MIDDLE
, 
	gDROP_LOW
 };

51 
	eBur°Profûe
 {

52 
	gQPSK_1_2
, 
	gQPSK_3_4
,

53 
	gQAM16_1_2
, 
	gQAM16_3_4
,

54 
	gQAM64_2_3
, 
	gQAM64_3_4
,

55 
	gN_BURST_PROFILES


61 
	sLökId
 {

63 
	gndx_
;

65 
	gwimax
::
LökDúe˘i⁄
 
dú_
;

67 
LökId
 (
ndx
 = 0, 
wimax
::
LökDúe˘i⁄
 
dú
 = wimax::
IN
)

68 : 
ndx_
 (
ndx
), 
dú_
 (
dú
) { }

70 
boﬁ
 
	g›î©‹
!(c⁄° 
LökId
& 
x
) {

71  ( 
x
.
ndx_
 !ndx_ || x.
dú_
 != dir_ ); }

76 
	sNextH›Info
 {

78 
WimaxNodeId
 
	g√xtH›_
;

80 
	gnH›s_
;

83 
NextH›Info
–
WimaxNodeId
 
√xtH›
 = 0, 
nH›s
 = 0 ) {

84 
√xtH›_
 = 
√xtH›
; 
	gnH›s_
 = 
nH›s
; }

	@wimax_header.h

20 #i‚de‡
__NS2_WIMAX_HEADER_H


21 
	#__NS2_WIMAX_HEADER_H


	)

23 
	~<∑ckë.h
>

24 
	~<wimax_defs.h
>

26 
	~<wimsh_hódî.h
>

29 
	sWimaxFsh
 {

30 
	mpublic
:

32 íum { 
NO_FRAG
 = 0, 
	mLAST_FRAG
 = 1, 
	mFIRST_FRAG
 = 2, 
	mCONT_FRAG
 = 3 };

33 
	m¥iv©e
:

35 
°©e_
;

37 
	mf¢_
;

38 
	mpublic
:

40 
WimaxFsh
 (Ë{ 
°©e_
 = 
NO_FRAG
; }

42 & 
°©e
 (Ë{  
	m°©e_
; }

44 & 
f¢
 (Ë{  
	mf¢_
; }

46 
f¢Size
 () {  8; }

48 
size
 () {  1; }

52 
	sWimaxMacHódî
 {

53 
	m¥iv©e
:

55 
boﬁ
 
¸c_
;

57 
	mÀngth_
;

59 
boﬁ
 
	m‰agmíèti⁄_
;

61 
boﬁ
 
	mgmsh_
;

63 
WimaxMeshCid
 
	mmeshCid_
;

67 
boﬁ
 
	mmesh_
;

70 
	mpublic
:

72 
WimaxMacHódî
 () {

73 
¸c_
 = 
Ál£
; 
	mÀngth_
 = 0;

74 
	m‰agmíèti⁄_
 = 
Ál£
;

75 
	mmesh_
 = 
Ál£
;

76 
	mgmsh_
 = 
Ál£
; }

78 
	mboﬁ
& 
¸c
 (Ë{  
	m¸c_
; }

80 & 
Àngth
 (Ë{  
	mÀngth_
; }

82 
	mboﬁ
& 
‰agmíèti⁄
 (Ë{  
	m‰agmíèti⁄_
; }

84 
	mboﬁ
& 
gmsh
 (Ë{  
	mgmsh_
; }

86 
	mboﬁ
& 
mesh
 (Ë{  
	mmesh_
; }

88 
	mWimaxMeshCid
& 
meshCid
 (Ë{  
	mmeshCid_
; }

90 
size
 (Ë{  6 + ( (
	m¸c_
) ? 4 : 0 ); }

92 
size
 (
boﬁ
 
¸c
, boﬁ 
‰agmíèti⁄
 = 
Ál£
) {

93  6 + ( (
¸c
Ë? 4 : 0 ) + ( (
‰agmíèti⁄
) ? 1 : 0 ); }

	@wimax_matrix.h

20 #i‚de‡
__NS2_WIMAX_MATRIX_H


21 
	#__NS2_WIMAX_MATRIX_H


	)

26 
	gãm∂©e
<
ty≥«me
 
	gT
>

27 ˛as†
	cM©rix
 {

30 
T
* 
	mm©rix
;

32 
	mrows
;

34 
	mcﬁs
;

36 
	mpublic
:

38 
	$M©rix
 (Ë: 
	`m©rix
(0), 
	`rows
(0), 
	`cﬁs
(0) { }

40 
	`M©rix
 (c⁄° 
M©rix
<
T
>&);

42 ~
	`M©rix
 ();

47 
T
& 
	$©
 (
i
, 
j
) {

48 i‡–
i
 >
rows
 || 
j
 >
cﬁs
 ) 
	`ªsize
 (i, j);

49  
m©rix
[
	`ödex
(
i
, 
j
)]; 
	}
}

51 
	$gëRows
 (Ëc⁄° {  
rows
; 
	}
}

53 
	$gëCﬁs
 (Ëc⁄° {  
cﬁs
; 
	}
}

55 
ª£t
 ();

57 
	g¥Ÿe˘ed
:

59 
ªsize
 (
i
, 
j
);

61 
	$ödex
 (
i
, 
j
) {

62  
j
 + 
cﬁs
 * 
i
; 
	}
}

64 
	$ödex
 (
i
, 
j
, 
n
) {

65  
j
 + 
n
 * 
i
; 
	}
}

67 
	g¥iv©e
:

68 
›î©‹
(c⁄° 
M©rix
<
T
>&);

71 
	gãm∂©e
<
ty≥«me
 
	gT
>

72 
	gM©rix
<
	gT
>::
M©rix
 (c⁄° M©rix<
T
>& 
C
)

74 
rows
 = 
C
.rows;

75 
	gcﬁs
 = 
C
.
cﬁs
;

76 
	gm©rix
 = 
√w
 
T
[
rows
 * 
cﬁs
];

77  
	gi
 = 0; i < 
rows
 * 
	gcﬁs
; i++ )

78 
	gm©rix
[
i
] = 
C
.
m©rix
[i];

81 
	gãm∂©e
<
ty≥«me
 
	gT
>

82 
	gM©rix
<
	gT
>::
	$ªsize
 (
i
, 
j
)

84 
√w_rows
 = ( 
i
 < 
rows
 ) ?Ñows : ( i + 1 );

85 
√w_cﬁs
 = ( 
j
 < 
cﬁs
 ) ? cols : ( j + 1 );

87 
T
* 
√w_m©rix
 = 
√w
 T[
√w_rows
 * 
√w_cﬁs
];

88  
ô
 = 0 ; ià< 
√w_rows
 ; it++ )

89  
jt
 = 0 ; jà< 
√w_cﬁs
 ; jt++ )

90 i‡–
ô
 < 
rows
 && 
jt
 < 
cﬁs
 )

91 
√w_m©rix
[
	`ödex
(
ô
, 
jt
, 
√w_cﬁs
)] = 
m©rix
[index(it, jt)];

93 
√w_m©rix
[
	`ödex
(
ô
, 
jt
, 
√w_cﬁs
)] = 0;

95 i‡–
m©rix
 ) 
dñëe
[] matrix;

96 
m©rix
 = 
√w_m©rix
;

97 
rows
 = 
√w_rows
;

98 
cﬁs
 = 
√w_cﬁs
;

99 
	}
}

101 
	gãm∂©e
<
ty≥«me
 
	gT
>

102 
	gM©rix
<
	gT
>::
	$ª£t
 ()

104 i‡–
m©rix
 ) 
dñëe
[] matrix;

105 
m©rix
 = 0;

106 
cﬁs
 = 
rows
 = 0;

107 
	}
}

109 
	gãm∂©e
<
ty≥«me
 
	gT
>

110 
	gM©rix
<
	gT
>::~
	$M©rix
 ()

112 i‡–
m©rix
 ) 
dñëe
[] matrix;

113 
	}
}

	@wimax_packet.h

20 #i‚de‡
__NS2_WIMAX_PACKET_H


21 
	#__NS2_WIMAX_PACKET_H


	)

23 
	~<li°
>

24 
	~<m≠
>

26 
	~<wimax_hódî.h
>

27 
	~<ù.h
>

35 
	sWimaxSdu
 {

36 
	mpublic
:

38 íum { 
MAX_HOPS
 = 64 };

39 
	m¥iv©e
:

41 
Packë
* 
ù_
;

43 
boﬁ
 
	m∑ylﬂd_
;

45 
WimaxNodeId
 
	mh›s_
[
MAX_HOPS
];

47 
	mnh›s_
;

49 
	mtime°amp_
;

50 
	mpublic
:

52 
WimaxSdu
 () {

53 
∑ylﬂd_
 = 
Ál£
;

54 
	mù_
 = 0;

55 
	mnh›s_
 = 0;

58 ~
WimaxSdu
 () { }

61 
boﬁ
 
∑ylﬂd
 () {

62 i‡–
	mù_
Ë 
	måue
;

63  
	mÁl£
;

66 
	mPackë
*& 
ù
 (Ë{  
	mù_
; }

68 
‰ìPaylﬂd
 () {

69 i‡–
	mù_
 ) { 
	mPackë
::
‰ì
 (
ù_
); ip_ = 0; }

72 
dr›Paylﬂd
 () {

73 i‡–
	mù_
 ) { 
	mPackë
::
‰ì
 (
ù_
); ip_ = 0; }

76 
c›yPaylﬂd
 (
WimaxSdu
* 
sdu
) {

77 i‡–
	msdu
->
	mù_
 ) ip_ = 
sdu
->
ù_
->
c›y
();

81 
ÊowId
 () {

82 i‡–
	mù_
 )  
HDR_IP
(
ù_
)->
Êowid
();

87 & 
time°amp
 (Ë{  
	mtime°amp_
; }

90 
addH›
 (
WimaxNodeId
 
h›
Ë{ 
	mh›s_
[
nh›s_
++] = hop; }

92 
åavî£dH›s
 (
WimaxNodeId
*& 
h
, & 
n
) {

93 
	mh
 = 
h›s_
; 
	mn
 = 
nh›s_
; }

95 
WimaxNodeId
 
œ°H›
 (Ë{  ( 
	mnh›s_
 > 0 ) ? 
	mh›s_
[
nh›s_
 - 1] : 0; }

97 
boﬁ
 
åavî£d
 (
WimaxNodeId
 
h›
) {

98  
	mi
 = 0 ; i < 
	mnh›s_
 ; i++ )

99 i‡–
	mh›
 =
h›s_
[
i
] )  
åue
;

100  
	mÁl£
; }

103 
size
 () {

104 i‡–
	mù_
 )  
HDR_CMN
(
ù_
)->
size
(Ë+ 2 * 
	mnh›s_
;

115 
	sWimaxPdu
 {

116 
	mpublic
:

119 íum { 
GENERIC
 };

122 
	m¥iv©e
:

124 
WimaxSdu
* 
sdu_
;

126 
WimaxMacHódî
 
	mhdr_
;

128 
WimaxFsh
 
	mfsh_
;

130 
WimaxNodeId
 
	mnodeId_
;

132 
boﬁ
 
	mîr‹_
;

134 
	mty≥_
;

141 
	mpublic
:

143 
WimaxPdu
 (Ë{ 
îr‹_
 = 
Ál£
; 
	mty≥_
 = 
GENERIC
; 
	msdu_
 = 0; }

145 
	mWimaxSdu
*& 
sdu
 (Ë{  
	msdu_
; }

147 
	mWimaxMacHódî
& 
hdr
 (Ë{  
	mhdr_
; }

153 & 
ty≥
 (Ë{  
	mty≥_
; }

155 
	mWimaxFsh
& 
fsh
 (Ë{  
	mfsh_
; }

157 
	mWimaxNodeId
& 
nodeId
 (Ë{  
	mnodeId_
; }

159 
	mboﬁ
& 
îr‹
 (Ë{  
	mîr‹_
; }

161 
size
 (
n
) {

162 
	mhdr_
.
Àngth
(Ë
n
 + 
hdr_
.
size
() +

163 ––
hdr_
.
mesh
(ËË? 
meshSubhdrSize
() : 0 ) +

164 ––
hdr_
.
‰agmíèti⁄
(ËË? 
fsh_
.
size
() : 0 );

167 
size
 () {

168  
	mhdr_
.
Àngth
();

172 
d©a
 () {

174 
	mhdr_
.
Àngth
()

175 - 
	mhdr_
.
size
()

176 - ( ( 
	mhdr_
.
mesh
(ËË? 
meshSubhdrSize
() : 0 )

177 - ( ( 
hdr_
.
‰agmíèti⁄
(ËË? 
fsh_
.
size
() : 0 ); }

179 
meshSubhdrSize
 () {  2; }

181 
möSize
 () {  6 + 2 + 1; }

185 
	g°d
::
	tli°
<
	tWimaxPdu
*> 
	tPduLi°
;

	@wimax_utilities.h

20 #i‚de‡
__NS2_WIMAX_UTILITIES_H


21 
	#__NS2_WIMAX_UTILITIES_H


	)

23 
	gãm∂©e
<
˛ass
 
	gT
>

24 
ölöe
 
	gT
& 
	$max
 (
T
& 
a
, T& 
b
Ë{  (á >b ) ?á : b; 
	}
}

26 
	gãm∂©e
<
˛ass
 
	gT
>

27 
ölöe
 
	gT
& 
	$mö
 (
T
& 
a
, T& 
b
Ë{  (á < b ) ?á : b; 
	}
}

	@
1
.
0
11
170
wimax_buffers.cc
wimax_buffers.h
wimax_circular.h
wimax_common.h
wimax_debug.cc
wimax_debug.h
wimax_defs.h
wimax_header.h
wimax_matrix.h
wimax_packet.h
wimax_utilities.h
